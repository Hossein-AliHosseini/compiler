1. program -> declaration_list
2. declaration_list -> declaration_list declaration | declaration
3. declaration -> var_declaration | fun_declaration
4. var_declaration -> type_specifier #p_id_index ID ; #declare_var | type_specifier #p_id_index ID [ #p_num NUM ] #declare_array ;
5. type_specifier -> #p_label int | #p_label void
6. fun_declaration -> type_specifier #p_id ID #func_declare ( params ) compound_stmt #end_function
7. params -> param_list | void
8. param_list -> param_list , param | param
9. param -> type_specifier #p_id_index ID #declare_var | type_specifier #p_id_index ID [ ] #declare_var
10. compound_stmt -> { local_declarations statement_list }
11. local_declarations -> local_declarations var_declaration | Epsilon
12. statement_list -> statement_list statement | Epsilon
13. statement -> expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt | switch_stmt
14. expression_stmt -> expression ; #pop_exp | break ; #break_jp | ;
15. selection_stmt -> if ( expression ) #save statement endif #jpf | if ( expression ) #save statement else #jpf_save statement endif #jp
16. iteration_stmt -> while #while_start ( expression ) #while_condition statement #while_end
17. return_stmt -> return ; | return expression ;
18. switch_stmt -> switch #switch_start ( expression ) { case_stmts default_stmt }
19. case_stmts -> case_stmts case_stmt | Epsilon
20. case_stmt -> case #p_num NUM : #save statement_list #jpf
21. default_stmt -> default : statement_list | Epsilon
22. expression -> var = expression #assign | simple_expression
23. var -> #p_id ID | #p_id ID [ expression ] #array_access
24. simple_expression -> additive_expression relop additive_expression #op | additive_expression
25. relop -> #p_label < | #p_label ==
26. additive_expression -> additive_expression addop term #op | term
27. addop -> #p_label + | #p_label -
28. term -> term mulop factor #op | factor
29. mulop -> #p_label * | #p_label /
30. factor -> ( expression ) | var | call | #p_num_temp NUM
31. call -> #p_id ID ( args )
32. args -> arg_list | Epsilon
33. arg_list -> arg_list , expression | expression


Keywords: else if int return void while switch case default break endif

Special symbols: + - * / < == = : ; , ( ) [ ] { } /* */ //

ID = letter letter*
NUM = digit digit*
letter = a | .. | z | A | .. | Z
digit = 0 | .. | 9

Comments: /* ... */

